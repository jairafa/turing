# Generated by Django 4.0.3 on 2022-03-11 09:30

from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.models import User
import django.db.models.deletion

from tareas.procesos.category import migrate_category
from tareas.procesos.territorial import migrate_territorial
from tareas.procesos.cliente_dummy import generate_cliente


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    def insert_init_user(apps, schema_editor):
        """Crea el usuario del sistema"""
        user_qs = User.objects.filter(username__iexact="system_user")
        message: str = "No fue posible crear usuario del sistema"
        if not user_qs.exists() and user_qs.count() != 1:
            # Usuario django no existe -> Se crea
            user = User.objects.create_user("system_user", password="system_user")
            user.email = "system_user@admin.com"
            user.first_name = "Usuario del Sistema"
            user.last_name = "Cargue Inicial"
            user.is_superuser = False
            user.is_staff = False
            user.save()
            message: str = "Usuario del sistema creado correctamente"
        print(message)

    def undo_init_user(apps, schema_editor):
        User.objects.all().delete()

    def insert_init_category(apps, schema_editor):
        """Inserción masiva de categorias"""
        migrate_category("cliente/migrations/categorias.csv")

    def undo_init_category(apps, schema_editor):
        category = apps.get_model("cliente", "category")
        category.objects.all().delete()

    def insert_init_territorial(apps, schema_editor):
        """Insercion masiva de paises, departamentos y municipios"""
        migrate_territorial("cliente/migrations/municipios.csv")

    def undo_init_territorial(apps, schema_editor):
        territorial = apps.get_model("cliente", "territorial")
        territorial.objects.all().delete()

    def insert_init_cliente(apps, schema_editor):
        """
        Inserción masiva de clientes con datos dummy
        El parametro indica la cantidad de clientes a crear
        """
        # generate_cliente(190000)
        generate_cliente(200)

    def undo_init_cliente(apps, schema_editor):
        cliente = apps.get_model("cliente", "cliente")
        cliente.objects.all().delete()

    operations = [
        migrations.CreateModel(
            name="category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Fecha de creación"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Fecha de actualización"),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="territorial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "territorial_type",
                    models.CharField(
                        choices=[("P", "Pais"), ("D", "Departamento"), ("C", "Ciudad")],
                        default="city",
                        max_length=12,
                        verbose_name="Tipo Territorio",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Fecha de creación"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Fecha de actualización"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="dad",
                        to="cliente.territorial",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="cliente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "is_active",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "activo"), (0, "inactivo")], default=1
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Fecha de creación"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Fecha de actualización"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="cliente.category"
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="ciudad",
                        to="cliente.territorial",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="pais",
                        to="cliente.territorial",
                    ),
                ),
                (
                    "departament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="departamento",
                        to="cliente.territorial",
                    ),
                ),
                (
                    "user_created",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.RunPython(insert_init_user, reverse_code=undo_init_user),
        migrations.RunPython(insert_init_category, reverse_code=undo_init_category),
        migrations.RunPython(insert_init_territorial, reverse_code=undo_init_territorial),
        migrations.RunPython(insert_init_cliente, reverse_code=undo_init_cliente),
    ]
